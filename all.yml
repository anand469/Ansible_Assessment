---
- name: Configuring standard CA certificates
  hosts: all
  become: yes

  tasks:
    # Installing ca-certificates package if the host is of Debian family
    - name: Installing ca-certificates package if the host is of Debian family
      package:
        name: ca-certificates
        state: present
      when: ansible_os_family == "Debian"

    # Installing ca-certificates package if the host is of RedHat family
    - name: Installing ca-certificates package if the host is of RedHat family
      package:
        name: ca-certificates
        state: present
      when: ansible_os_family == "RedHat"

    # Update CA certificate bundle on Debian
    - name: Update CA certificate bundle on Debian
      command: update-ca-certificates
      when: ansible_os_family == "Debian"

    # Update CA certificate bundle on RedHat
    - name: Update CA certificate bundle on RedHat
      command: update-ca-trust
      when: ansible_os_family == "RedHat"

---
- name: Validating and installing Custom CA certificates
  hosts: all
  become: yes
  vars:
    ca_certificates:
      - name: "CA1"
        cert_src: "./CA1.crt"
        key_src: "./CA1.key"
        cert_dest_debian: "/usr/local/share/ca-certificates/CA1.crt"
        cert_dest_redhat: "/etc/pki/ca-trust/source/anchors/CA1.crt"
        key_dest: "/etc/ssl/private/CA1.key"
      - name: "CA2"
        cert_src: "./CA2.crt"
        key_src: "./CA2.key"
        cert_dest_debian: "/usr/local/share/ca-certificates/CA2.crt"
        cert_dest_redhat: "/etc/pki/ca-trust/source/anchors/CA2.crt"
        key_dest: "/etc/ssl/private/CA2.key"
      - name: "CA3"
        cert_src: "./CA3.crt"
        key_src: "./CA3.key"
        cert_dest_debian: "/usr/local/share/ca-certificates/CA3.crt"
        cert_dest_redhat: "/etc/pki/ca-trust/source/anchors/CA3.crt"
        key_dest: "/etc/ssl/private/CA3.key"
  tasks:
    - name: Validate {{ item.name }} certificate
      stat:
        path: "{{ item.cert_src }}"
      register: cert_check
      loop: "{{ ca_certificates }}"
      loop_control:
        label: "{{ item.name }}"
      
    - name: Check {{ item.name }} certificate validity
      shell: "openssl x509 -checkend 0 -noout -in {{ item.cert_src }}"
      when: cert_check.stat.exists
      loop: "{{ ca_certificates }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Copy {{ item.name }} certificate to the host
      copy:
        src: "{{ item.cert_src }}"
        dest: "{{ item.cert_dest_debian }}"
      when: 
        - cert_check.stat.exists
        - ansible_os_family == "Debian"
      notify: update_ca_certificates (Debian)
      loop: "{{ ca_certificates }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Copy {{ item.name }} certificate to the host
      copy:
        src: "{{ item.cert_src }}"
        dest: "{{ item.cert_dest_redhat }}"
      when: 
        - cert_check.stat.exists
        - ansible_os_family == "RedHat"
      notify: update_ca_certificates (RedHat)
      loop: "{{ ca_certificates }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Copy {{ item.name }} key to the host
      copy:
        src: "{{ item.key_src }}"
        dest: "{{ item.key_dest }}"
        mode: "0600"
      when: cert_check.stat.exists
      loop: "{{ ca_certificates }}"
      loop_control:
        label: "{{ item.name }}"

  handlers:
    - name: update_ca_certificates (Debian)
      command: "update-ca-certificates"
      when: ansible_os_family == "Debian"

    - name: update_ca_certificates (RedHat)
      command: "update-ca-trust"
      when: ansible_os_family == "RedHat"  

---
- name: Deploying a python application into a virtual environment
  hosts: all
  become: yes
  
  vars:
    deployment_location: /opt/example
    application_port: 5000
    wheel_file: Example-1.1.1-py3-none-any.whl

  tasks:
    # Ensure deployment directory exists
    - name: Ensure deployment directory exists
      file:
        path: "{{ deployment_location }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0755'

    # Install Python 3 and pip
    - name: Install Python 3 and pip
      package:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-pip
        - python3-venv

    # Create a virtual environment
    - name: Create a virtual environment
      command: python3 -m venv "{{ deployment_location }}/venv"
      args:
        creates: "{{ deployment_location }}/venv/bin/activate"

    # Upgrade pip in the virtual environment
    - name: Upgrade pip in the virtual environment
      command: "{{ deployment_location }}/venv/bin/pip install --upgrade pip"

    # Copy the wheel file to the deployment directory
    - name: Copy the wheel file to the deployment directory
      copy:
        src: "{{ wheel_file }}"
        dest: "{{ deployment_location }}/{{ wheel_file }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'

    # Install the application wheel file
    - name: Install the application wheel file
      command: "{{ deployment_location }}/venv/bin/pip install {{ deployment_location }}/{{ wheel_file }}"

    # Copy app.py to the deployment directory
    - name: Copy app.py to the deployment directory
      copy:
        src: app.py
        dest: "{{ deployment_location }}/app.py"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid }}"
        mode: '0644'

    # Create systemd service file for the Flask app
    - name: Create systemd service file for the Flask app
      copy:
        content: |
          [Unit]
          Description=Flask Application
          After=network.target

          [Service]
          User={{ ansible_user_id }}
          WorkingDirectory={{ deployment_location }}
          ExecStart={{ deployment_location }}/venv/bin/flask run -p {{ application_port }}
          Restart=always

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/flask_app.service
        owner: root
        group: root
        mode: '0644'

    # Reload systemd to pick up new flask_app service
    - name: Reload systemd to pick up new flask_app service
      command: systemctl daemon-reload

    # Enable and start the flask_app service
    - name: Enable and start the flask_app service
      systemd:
        name: flask_app
        enabled: yes
        state: started
